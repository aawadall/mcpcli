from resources.registry import registered_resources


def handle_request(req):
    method = req.get('method')
    if method == 'resources/list':
        return handle_list_resources(req)
    elif method == 'resources/read':
        return handle_read_resource(req)
    elif method == 'tools/list':
        return handle_list_tools(req)
    elif method == 'tools/call':
        return handle_call_tool(req)
    else:
        return {'error': {'code': -32601, 'message': f'Method not found: {method}'}, 'id': req.get('id')}


def handle_list_resources(req):
    return {'result': {'resources': registered_resources}, 'id': req.get('id')}


def handle_read_resource(req):
    uri = req.get('params', {}).get('uri')
    if not uri:
        return {'error': {'code': -32602, 'message': 'Invalid params: uri is required'}, 'id': req.get('id')}
    # TODO: Implement reading the resource
    return {'error': {'code': -32601, 'message': 'Read resource functionality not implemented'}, 'id': req.get('id')}


def handle_list_tools(req):
    return {'result': {'tools': []}, 'id': req.get('id')}


def handle_call_tool(req):
    tool_name = req.get('params', {}).get('toolName')
    args = req.get('params', {}).get('arguments')
    if not tool_name or not isinstance(tool_name, str):
        return {'error': {'code': -32602, 'message': 'Invalid params: toolName is required and must be a string'}, 'id': req.get('id')}
    if args is None or not isinstance(args, (dict, list)):
        return {'error': {'code': -32602, 'message': 'Invalid params: arguments must be an object or an array'}, 'id': req.get('id')}
    # TODO: Implement calling tools
    return {'error': {'code': -32601, 'message': 'No tools defined'}, 'id': req.get('id')}
